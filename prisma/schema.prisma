generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "mysql"
  url      = env("LHD_DB_URL")
}

model aa {
  id_aa                      Int      @id @default(autoincrement())
  id_lab                     Int
  din                        String   @db.VarChar(10)
  vol                        Float?
  description                String?  @db.VarChar(100)
  id_unit                    Int
  id_cosec                   Int
  id_head                    Int
  updated                    String   @db.VarChar(100)
  who_when                   String?  @db.VarChar(100)
  flag                       Boolean?
  room                       Room     @relation(fields: [id_lab], references: [id], onDelete: Cascade, map: "aa_ibfk_1")
  unit                       Unit     @relation(fields: [id_unit], references: [id], onUpdate: Restrict, map: "aa_ibfk_2")
  person_aa_id_cosecToperson Person   @relation("aa_id_cosecToperson", fields: [id_cosec], references: [id_person], onUpdate: Restrict, map: "aa_ibfk_3")
  person_aa_id_headToperson  Person   @relation("aa_id_headToperson", fields: [id_head], references: [id_person], onUpdate: Restrict, map: "aa_ibfk_4")

  @@index([id_cosec], map: "id_cosec")
  @@index([id_head], map: "id_head")
  @@index([id_lab], map: "id_lab")
  @@index([id_unit], map: "id_unit")
}

model audits {
  id_audit   Int      @id @default(autoincrement())
  id_unit    Int      @unique(map: "id_unit")
  date_audit DateTime @db.Date

  @@unique([id_unit, date_audit], name: "unique_audit", map: "unique_audit")
}

model auth_chem {
  id_auth_chem   Int             @id @default(autoincrement())
  cas_auth_chem  String          @unique(map: "cas_auth_chem") @db.VarChar(100)
  auth_chem_en   String          @unique(map: "auth_chem_en") @db.VarChar(500)
  auth_chem_fr   String?         @db.VarChar(500)
  flag_auth_chem Boolean
  auth_chem_log  auth_chem_log[]
  auth_rchem     auth_rchem[]
}

model auth_chem_log {
  id_auth_chem_log Int       @id @default(autoincrement())
  id_auth_chem     Int
  sciper_author    Int
  author           String    @db.VarChar(100)
  action           String    @db.VarChar(10)
  date             DateTime  @db.DateTime(0)
  auth_chem        auth_chem @relation(fields: [id_auth_chem], references: [id_auth_chem], onUpdate: Restrict, map: "auth_chem_log_ibfk_1")

  @@index([id_auth_chem], map: "auth_chem_log_ibfk_1")
}

model auth_chem_old {
  id_auth_chem  Int     @id @default(autoincrement())
  cas_auth_chem String? @unique(map: "cas_auth_chem") @db.VarChar(100)
  auth_chem_en  String? @unique(map: "auth_chem_en") @db.VarChar(100)
  auth_chem_fr  String? @db.VarChar(100)
}

model Dispensation {
  id          Int                   @id @default(autoincrement()) @map("id_auth_dsps")
  slug        String                @unique(map: "auth_dsps") @map("auth_dsps") @db.VarChar(10)
  log_in      Int?
  log_in_time DateTime?             @db.DateTime(0)
  versions    DispensationVersion[]

  @@unique([slug, id], name: "auth_dsps_id_auth_dsps", map: "auth_dsps_id_auth_dsps")
  @@unique([log_in, id], map: "log_in_auth_dsps")
  @@unique([log_in_time, id], map: "log_in_time_auth_dsps")
  @@map("auth_dsps")
}

model DispensationHeldRelation {
  id_auth_dsps_holder     Int                 @id @default(autoincrement())
  id_dispensation_version Int                 @map("id_auth_dsps_version")
  id_person               Int
  person                  Person              @relation(fields: [id_person], references: [id_person], onUpdate: Restrict, map: "auth_dsps_holder_ibfk_1")
  dispensation_version    DispensationVersion @relation(fields: [id_dispensation_version], references: [id], onUpdate: Restrict, map: "auth_dsps_holder_ibfk_2")

  @@unique([id_person, id_dispensation_version], name: "authholder", map: "authholder")
  @@index([id_dispensation_version], map: "id_auth_dsps_version")
  @@map("auth_dsps_holder")
}

model DispensationInRoomRelation {
  id_auth_dsps_lab        Int                 @id @default(autoincrement())
  id_dispensation_version Int                 @map("id_auth_dsps_version")
  id_room                 Int                 @map("id_lab")
  room                    Room                @relation(fields: [id_room], references: [id], onUpdate: Restrict, map: "auth_dsps_lab_ibfk_1")
  dispensation_version    DispensationVersion @relation(fields: [id_dispensation_version], references: [id], onUpdate: Restrict, map: "auth_dsps_lab_ibfk_2")

  @@unique([id_room, id_dispensation_version], name: "authlab", map: "authlab")
  @@index([id_dispensation_version], map: "id_auth_dsps_version")
  @@map("auth_dsps_lab")
}

model DispensationVersion {
  id              Int                          @id @default(autoincrement()) @map("id_auth_dsps_version")
  id_dispensation Int                          @map("id_auth_dsps")
  author          String                       @db.VarChar(50)
  sciper_author   Int
  subject         String                       @db.VarChar(50)
  description     String?                      @map("requires") @db.VarChar(2000)
  comment         String?                      @db.VarChar(2000)
  status          String                       @db.VarChar(10)
  date_start      DateTime                     @db.Date
  date_end        DateTime                     @db.Date
  date_created    DateTime                     @map("date") @db.DateTime(0)
  draft_status    String                       @map("version") @db.Char(5)
  modified_by     String?                      @map("notifier") @db.VarChar(50)
  date_modified   DateTime?                    @map("notification_date") @db.DateTime(0)
  held            DispensationHeldRelation[]
  in_room         DispensationInRoomRelation[]
  dispensation    Dispensation                 @relation(fields: [id_dispensation], references: [id], onUpdate: Restrict, map: "auth_dsps_version_ibfk_1")

  @@index([id_dispensation], map: "id_auth_dsps")
  @@map("auth_dsps_version")
}

model auth_holder {
  id_auth_holder Int      @id @default(autoincrement())
  id_auth_sst    Int
  sciper         Int
  holder_name    String   @db.VarChar(100)
  auth_sst       auth_sst @relation(fields: [id_auth_sst], references: [id_auth_sst], onUpdate: Restrict, map: "auth_holder_ibfk_1")

  @@unique([id_auth_sst, sciper, holder_name], name: "id_auth_sst_sciper_holder", map: "id_auth_sst_sciper_holder")
}

model auth_lab {
  id_auth_lab Int      @id @default(autoincrement())
  id_auth_req Int
  id_lab      Int?
  id_storage  Int?
  storage     storage? @relation(fields: [id_storage], references: [id_storage], onDelete: Restrict, onUpdate: Restrict, map: "auth_lab_ibfk_3")
  Room        Room?    @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "auth_lab_ibfk_4")
  auth_req    auth_req @relation(fields: [id_auth_req], references: [id_auth_req], onUpdate: Restrict, map: "auth_lab_ibfk_5")

  @@index([id_auth_req], map: "id_auth_req")
  @@index([id_lab], map: "id_lab")
  @@index([id_storage], map: "id_storage")
}

model auth_rchem {
  id_auth_rchem Int        @id @default(autoincrement())
  id_auth_req   Int?
  id_auth_chem  Int?
  auth_chem     auth_chem? @relation(fields: [id_auth_chem], references: [id_auth_chem], onDelete: Restrict, onUpdate: Restrict, map: "auth_rchem_ibfk_1")
  auth_req      auth_req?  @relation(fields: [id_auth_req], references: [id_auth_req], onDelete: Restrict, onUpdate: Restrict, map: "auth_rchem_ibfk_2")

  @@index([id_auth_chem], map: "id_auth_chem")
  @@index([id_auth_req], map: "id_auth_req")
}

model auth_req {
  id_auth_req   Int          @id @default(autoincrement())
  auth_req      String?      @unique(map: "auth_req") @db.VarChar(16)
  date_auth_req DateTime?    @db.Date
  auth_lab      auth_lab[]
  auth_rchem    auth_rchem[]
  auth_sst      auth_sst[]
}

model auth_sst {
  id_auth_sst      Int           @id @default(autoincrement())
  id_auth_req      Int
  auth_sst         String?       @unique(map: "auth_sst") @db.VarChar(50)
  id_unit_auth_sst Int?
  date_auth_sst    DateTime?     @db.Date
  qstock_auth_sst  String?       @db.VarChar(80)
  quse_auth_sst    String?       @db.VarChar(80)
  form_auth_sst    String?       @db.VarChar(80)
  status_auth_sst  String?       @db.VarChar(30)
  com_auth_sst     String?       @db.VarChar(500)
  created_at       DateTime?     @db.Date
  auth_holder      auth_holder[]
  auth_req         auth_req      @relation(fields: [id_auth_req], references: [id_auth_req], onUpdate: Restrict, map: "auth_sst_ibfk_1")

  @@index([id_auth_req], map: "id_auth_req")
}

model bio {
  id_bio      Int           @id @default(autoincrement())
  id_lab      Int           @unique(map: "id_lab_2")
  bio_level   Int
  comment     String?       @db.VarChar(2000)
  Room        Room          @relation(fields: [id_lab], references: [id], onUpdate: Restrict, map: "bio_ibfk_1")
  bio_org_lab bio_org_lab[]

  @@index([id_lab], map: "id_lab")
}

model bio_org {
  id_bio_org  Int           @id @default(autoincrement())
  organism    String        @db.VarChar(100)
  risk_group  Int
  updated_on  DateTime?     @db.Date
  updated_by  String?       @db.VarChar(50)
  bio_org_lab bio_org_lab[]

  @@unique([organism, risk_group], name: "org_risk", map: "org_risk")
}

model bio_org_lab {
  id_bio_org_lab Int      @id @default(autoincrement())
  id_bio         Int
  id_bio_org     Int?
  bio            bio      @relation(fields: [id_bio], references: [id_bio], onUpdate: Restrict, map: "bio_org_lab_ibfk_1")
  bio_org        bio_org? @relation(fields: [id_bio_org], references: [id_bio_org], onDelete: Restrict, onUpdate: Restrict, map: "bio_org_lab_ibfk_2")

  @@unique([id_bio, id_bio_org], name: "org_lab", map: "org_lab")
  @@index([id_bio_org], map: "id_bio_org")
}

model cad_corr {
  id_cad_sto Int      @id @default(autoincrement())
  id_lab     Int?
  id_storage Int?
  id_haz     Int?
  score      Int?
  storage    storage? @relation(fields: [id_storage], references: [id_storage], onDelete: Restrict, onUpdate: Restrict, map: "cad_corr_ibfk_1")
  Room       Room?    @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "cad_corr_ibfk_2")

  @@index([id_haz], map: "id_haz")
  @@index([id_lab], map: "id_lab")
  @@index([id_storage], map: "id_storage")
}

model cad_lab {
  id_cad Int   @id @default(autoincrement())
  id_lab Int?
  id_haz Int?
  score  Int?
  Room   Room? @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "cad_lab_ibfk_1")
  haz    haz?  @relation(fields: [id_haz], references: [id_haz], onDelete: Restrict, onUpdate: Restrict, map: "cad_lab_ibfk_2")

  @@index([id_haz], map: "id_haz")
  @@index([id_lab], map: "id_lab")
}

model cryo {
  id_cryo  Int     @id @default(autoincrement())
  id_dewar Int
  liquid   String? @db.VarChar(3)
  liters   Float?
  dewar    dewar   @relation(fields: [id_dewar], references: [id_dewar], onUpdate: Restrict, map: "cryo_ibfk_1")

  @@index([id_dewar], map: "id_dewar")
}

model cut {
  id_cut       Int     @id @default(autoincrement())
  id_lab       Int?
  cut          String? @db.VarChar(50)
  cut_time     Int?
  cut_hazard   String? @db.VarChar(500)
  cut_measure  String? @db.VarChar(500)
  cut_priority Int?
  Room         Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "cut_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model cuts {
  id_cut     Int     @id @default(autoincrement())
  building   String? @db.VarChar(10)
  sector     String? @db.VarChar(10)
  floor      Int?
  lab_number String? @db.VarChar(10)
  type       String? @db.VarChar(200)
  unit       String? @db.VarChar(50)
  prof       String? @db.VarChar(100)
  cosec      String? @db.VarChar(100)
  cut        String? @db.VarChar(50)
  time       String? @db.VarChar(20)
  hazard     String? @db.VarChar(500)
  measure    String? @db.VarChar(500)
  priority   Int?
}

model dewar {
  id_dewar Int     @id @default(autoincrement())
  id_lab   Int?
  comment  String? @db.VarChar(500)
  cryo     cryo[]
  Room     Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "dewar_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model elec {
  id_elec   Int     @id @default(autoincrement())
  id_lab    Int?
  capacitor String? @db.Char(1)
  v_ac      Float?
  v_dc      Float?
  i         Float?
  i_battery Float?
  state     Int?
  access    Int?
  Room      Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "elec_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model School {
  id        Int         @id @default(autoincrement()) @map("id_faculty")
  name      String?     @unique(map: "unique_faculty") @map("name_faculty") @db.VarChar(20)
  institute Institute[]

  @@map("faculty")
}

model gas {
  id_gas    Int         @id @default(autoincrement())
  gas       String?     @db.VarChar(50)
  state     String?     @db.VarChar(4)
  gashazard gashazard[]
  gnb       gnb[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model gasbottle {
  bottle   Int?
  building String? @db.VarChar(5)
  type     String? @db.VarChar(2)
  cupboard String? @db.Char(1)

  @@ignore
}

model gaschem {
  id_gaschem Int      @id @default(autoincrement())
  id_lab     Int?
  id_storage Int?
  id_haz     Int
  score      Int?
  Room       Room?    @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gaschem_ibfk_1")
  haz        haz      @relation(fields: [id_haz], references: [id_haz], onUpdate: Restrict, map: "gaschem_ibfk_2")
  storage    storage? @relation(fields: [id_storage], references: [id_storage], onDelete: Restrict, onUpdate: Restrict, map: "gaschem_ibfk_3")

  @@unique([id_lab, id_haz], name: "labhaz", map: "labhaz")
  @@unique([id_storage, id_haz], name: "stohaz", map: "stohaz")
  @@index([id_haz], map: "id_haz")
}

model gashazard {
  id_gashazard Int     @id @default(autoincrement())
  id_gas       Int?
  id_hazard    String? @db.VarChar(2)
  gas          gas?    @relation(fields: [id_gas], references: [id_gas], onDelete: Restrict, onUpdate: Restrict, map: "gashazard_ibfk_1")

  @@index([id_gas], map: "id_gas")
}

model gnb {
  id_gnb     Int          @id @default(autoincrement())
  id_gas     Int?
  gnb_q      Float?
  gnb_p      Int?
  gas        gas?         @relation(fields: [id_gas], references: [id_gas], onDelete: Restrict, onUpdate: Restrict, map: "gnb_ibfk_1")
  gnb_labsto gnb_labsto[]

  @@index([id_gas], map: "id_gas")
}

model gnb_labsto {
  id_gnbls   Int      @id @default(autoincrement())
  id_gnb     Int?
  id_storage Int?
  id_lab     Int?
  gnb        gnb?     @relation(fields: [id_gnb], references: [id_gnb], onDelete: Restrict, onUpdate: Restrict, map: "gnb_labsto_ibfk_1")
  storage    storage? @relation(fields: [id_storage], references: [id_storage], onDelete: Restrict, onUpdate: Restrict, map: "gnb_labsto_ibfk_2")
  Room       Room?    @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gnb_labsto_ibfk_3")

  @@index([id_gnb], map: "id_gnb")
  @@index([id_lab], map: "id_lab")
  @@index([id_storage], map: "id_storage")
}

model haz {
  id_haz          Int        @id @default(autoincrement())
  haz_category    String?    @db.VarChar(60)
  haz_en          String?    @db.VarChar(80)
  haz_fr          String?    @db.VarChar(80)
  id_haz_category Int
  cad_lab         cad_lab[]
  gaschem         gaschem[]
  haz_date        haz_date[]
}

model haz_category {
  id_haz_category Int        @id @default(autoincrement())
  haz_category    String     @unique(map: "haz_category") @db.VarChar(60)
  haz_date        haz_date[]
}

model haz_date {
  id_haz_date     Int          @id @default(autoincrement())
  id_lab          Int
  id_haz_category Int
  id_haz          Int?
  date            DateTime     @db.DateTime(0)
  editor          String       @db.VarChar(50)
  log_in          Int?
  log_in_time     DateTime?    @db.DateTime(0)
  Room            Room         @relation(fields: [id_lab], references: [id], onUpdate: Restrict, map: "haz_date_ibfk_1")
  haz_category    haz_category @relation(fields: [id_haz_category], references: [id_haz_category], onUpdate: Restrict, map: "haz_date_ibfk_2")
  haz             haz?         @relation(fields: [id_haz], references: [id_haz], onDelete: Restrict, onUpdate: Restrict, map: "haz_date_ibfk_3")

  @@index([id_haz], map: "id_haz")
  @@index([id_haz_category], map: "id_haz_category")
  @@index([id_lab], map: "id_lab")
}

model Institute {
  id        Int     @id @default(autoincrement()) @map("id_institut")
  name      String? @map("name_institut") @db.VarChar(60)
  id_school Int     @map("id_faculty")
  school    School  @relation(fields: [id_school], references: [id], onUpdate: Restrict, map: "institut_ibfk_1")
  unit      Unit[]

  @@unique([name, id_school], name: "unique_institut", map: "unique_institut")
  @@index([id_school], map: "id_faculty")
  @@map("institut")
}

model irad {
  id_irad                   Int       @id @default(autoincrement())
  id_lab                    Int?
  irad_facility             String?   @db.VarChar(50)
  irad_source               String?   @db.VarChar(20)
  irad_radioisotope         String?   @db.VarChar(10)
  irad_activity             Float?
  irad_voltage              Float?
  irad_current              Float?
  irad_power                Float?
  irad_protection           String?   @db.VarChar(20)
  irad_name_instrument      String?   @db.VarChar(50)
  irad_authority            String?   @db.VarChar(10)
  id_person                 Int?
  irad_n_authorisation      String?   @db.VarChar(20)
  irad_state_authorisation  String?   @db.VarChar(20)
  irad_exdate_authorisation DateTime? @db.Date
  irad_comment              String?   @db.VarChar(200)
  Room                      Room?     @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "irad_ibfk_1")
  person                    Person?   @relation(fields: [id_person], references: [id_person], onDelete: Restrict, onUpdate: Restrict, map: "irad_ibfk_2")

  @@index([id_lab], map: "id_lab")
  @@index([id_person], map: "id_person")
}

model Room {
  id                        Int                          @id @default(autoincrement()) @map("id_lab")
  sciper_lab                Int?                         @unique(map: "unique_sciper_lab")
  building                  String                       @db.VarChar(5)
  sector                    String?                      @db.VarChar(5)
  floor                     String?                      @db.VarChar(5)
  roomNo                    String                       @map("lab") @db.VarChar(10)
  id_labType                Int?
  description               String?                      @db.VarChar(200)
  location                  String?                      @db.VarChar(10)
  vol                       Float?
  vent                      String?                      @db.Char(1)
  name                      String?                      @map("lab_display") @db.VarChar(20)
  aa                        aa[]
  dispensations             DispensationInRoomRelation[]
  auth_lab                  auth_lab[]
  bio                       bio?
  cad_corr                  cad_corr[]
  cad_lab                   cad_lab[]
  cut                       cut[]
  dewar                     dewar[]
  elec                      elec[]
  gaschem                   gaschem[]
  gnb_labsto                gnb_labsto[]
  haz_date                  haz_date[]
  irad                      irad[]
  kind                      RoomKind?                    @relation(fields: [id_labType], references: [id_labType], onDelete: Restrict, onUpdate: Restrict, map: "lab_ibfk_1")
  laser                     laser[]
  mag                       mag[]
  mag_f                     mag_f[]
  nano                      nano[]
  naudits                   naudits[]
  nirad                     nirad[]
  noise                     noise?
  tdegree                   tdegree[]
  unit_has_room             unit_has_room[]
  unit_has_storage_for_room unit_has_storage_for_room[]
  lab_has_hazards           lab_has_hazards[]

  @@unique([building, sector, floor, roomNo], name: "unique_lab", map: "unique_lab")
  @@unique([sciper_lab, building, sector, floor, roomNo], name: "unique_labo", map: "unique_labo")
  @@index([id_labType], map: "id_labType")
  @@map("lab")
}

model RoomKind {
  id_labType Int     @id @default(autoincrement())
  name       String? @map("labType") @db.VarChar(100)
  Room       Room[]

  @@map("labType")
}

model unit_has_room {
  id_unit Int
  id_lab  Int
  unit    Unit @relation(fields: [id_unit], references: [id], onUpdate: Restrict, map: "unit_has_room_ibfk_1")
  room    Room @relation(fields: [id_lab], references: [id], onUpdate: Restrict, map: "unit_has_room_ibfk_2")

  @@unique([id_unit, id_lab], name: "unique_unit_has_room", map: "unique_unit_has_room")
  @@index([id_lab], map: "id_lab")
  @@map("unit_has_room")
}

model unit_has_cosec {
  id_unit   Int
  id_person Int
  unit      Unit   @relation(fields: [id_unit], references: [id], onUpdate: Restrict, map: "unit_has_cosec_ibfk_1")
  cosec     Person @relation(fields: [id_person], references: [id_person], onUpdate: Restrict, map: "unit_has_cosec_ibfk_2")

  @@unique([id_unit, id_person], name: "unique_unit_has_person", map: "unique_unit_has_person")
  @@index([id_person], map: "id_person")
  @@map("unit_has_cosec")
}

model laser {
  id_laser        Int     @id @default(autoincrement())
  id_lab          Int?
  laser_class     String? @db.Char(2)
  laser_mode      String? @db.VarChar(20)
  laser_wave      Float?
  laser_power     Float?
  laser_energy    Float?
  laser_pulse     Float?
  laser_frequency Float?
  comment         String? @db.VarChar(300)
  Room            Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "laser_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model mag {
  id_mag      Int     @id @default(autoincrement())
  id_lab      Int?
  id_person   Int?
  bmax        Float?
  mag_comment String? @db.VarChar(500)
  Room        Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "mag_ibfk_1")
  person      Person? @relation(fields: [id_person], references: [id_person], onDelete: Restrict, onUpdate: Restrict, map: "mag_ibfk_2")
  mag_f       mag_f[]

  @@index([id_lab], map: "id_lab")
  @@index([id_person], map: "id_person")
}

model mag_f {
  id_magf    Int     @id @default(autoincrement())
  id_mag     Int
  id_lab     Int
  line       Float
  line_place String? @db.Char(1)
  Room       Room    @relation(fields: [id_lab], references: [id], onUpdate: Restrict, map: "mag_f_ibfk_1")
  mag        mag     @relation(fields: [id_mag], references: [id_mag], onUpdate: Restrict, map: "mag_f_ibfk_2")

  @@unique([id_mag, id_lab, line], name: "magf_unique", map: "magf_unique")
  @@index([id_lab], map: "id_lab")
  @@index([id_mag], map: "id_mag")
}

model migrations {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(96)
  created_at DateTime @default(now()) @db.Timestamp(0)
}

model nano {
  id_nano       Int     @id @default(autoincrement())
  id_lab        Int?
  nano_class    String? @db.VarChar(2)
  nano_type     String? @db.VarChar(100)
  nano_state    String? @db.VarChar(20)
  nano_quantity Float?
  nano_activity String? @db.VarChar(500)
  Room          Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "nano_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model naudits {
  id_naudits Int    @id @default(autoincrement())
  id_lab     Int?
  score1     Float?
  score2     Float?
  score3     Float?
  score4     Float?
  score5     Float?
  score6     Float?
  score7     Float?
  score8     Float?
  naudits    Float?
  Room       Room?  @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "naudits_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model nirad {
  id_nirad   Int     @id @default(autoincrement())
  id_lab     Int?
  nirad_type String? @db.Char(2)
  source     String? @db.Char(1)
  freq       Float?
  e_field    Float?
  h_field    Float?
  b_field    Float?
  power      Float?
  Room       Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "nirad_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model noise {
  id_noise Int    @id @default(autoincrement())
  id_lab   Int?   @unique(map: "id_lab_2")
  lex      Float?
  lpeak    Float?
  Room     Room?  @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "noise_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model Person {
  id_person              Int                        @id @default(autoincrement())
  sciper                 Int?                       @unique(map: "unique_sciper")
  name                   String?                    @map("name_person") @db.VarChar(60)
  surname                String?                    @map("surname_person") @db.VarChar(60)
  email                  String?                    @map("email_person") @db.VarChar(60)
  aa_aa_id_cosecToperson aa[]                       @relation("aa_id_cosecToperson")
  aa_aa_id_headToperson  aa[]                       @relation("aa_id_headToperson")
  dispensations_held     DispensationHeldRelation[]
  irad                   irad[]
  mag                    mag[]
  subunpro               subunpro[]
  unit_has_cosec         unit_has_cosec[]

  @@unique([name, surname, email], name: "unique_per", map: "unique_per")
  @@unique([sciper, name, surname, email], name: "unique_person", map: "unique_person")
  @@map("person")
}

model stoPlace {
  id_place Int       @id @default(autoincrement())
  place    String?   @db.VarChar(30)
  storage  storage[]
}

model stoPlace_catalyse {
  id_stoPlace Int    @id @default(autoincrement())
  stoPlace    String @db.VarChar(30)
}

model stoProperty {
  id_stoProperty Int       @id @default(autoincrement())
  stoProperty    String?   @db.VarChar(50)
  storage        storage[]
}

model stoProperty_catalyse {
  id_stoProperty Int    @id @default(autoincrement())
  stoProperty    String @db.VarChar(50)
}

model stoType {
  id_stoType Int       @id @default(autoincrement())
  stoType    String?   @db.VarChar(20)
  storage    storage[]
}

model stoType_catalyse {
  id_stoType Int    @id @default(autoincrement())
  stoType    String @db.VarChar(20)
}

model storage {
  id_storage                Int                         @id @default(autoincrement())
  id_stoType                Int?
  id_stoProperty            Int?
  barcode                   String?                     @db.VarChar(80)
  id_place                  Int?
  content                   String?                     @db.Char(2)
  auth_lab                  auth_lab[]
  cad_corr                  cad_corr[]
  gaschem                   gaschem[]
  gnb_labsto                gnb_labsto[]
  stoType                   stoType?                    @relation(fields: [id_stoType], references: [id_stoType], onDelete: Restrict, onUpdate: Restrict, map: "storage_ibfk_4")
  stoProperty               stoProperty?                @relation(fields: [id_stoProperty], references: [id_stoProperty], onDelete: Restrict, onUpdate: Restrict, map: "storage_ibfk_5")
  stoPlace                  stoPlace?                   @relation(fields: [id_place], references: [id_place], onDelete: Restrict, onUpdate: Restrict, map: "storage_ibfk_6")
  unit_has_storage_for_room unit_has_storage_for_room[]

  @@index([id_place], map: "id_place")
  @@index([id_stoProperty], map: "id_stoProperty")
  @@index([id_stoType], map: "id_stoType")
}

model storage_catalyse {
  id_storage     Int      @id @default(autoincrement())
  id_stoType     Int
  id_stoProperty Int
  id_stoPlace    Int
  content        String   @db.Char(2)
  barcode        String   @unique(map: "barcode") @db.VarChar(80)
  lab_display    String   @db.VarChar(20)
  sciper         Int
  author         String   @db.VarChar(50)
  date           DateTime @db.DateTime(0)

  @@unique([barcode, lab_display], name: "unique_barcode", map: "unique_barcode")
  @@index([id_stoPlace], map: "id_stoPlace")
  @@index([id_stoProperty], map: "id_stoProperty")
  @@index([id_stoType], map: "id_stoType")
}

model sub_storage_catalyse {
  id_sub_storage      Int    @id @default(autoincrement())
  id_storage          Int
  sub_storage_barcode String @unique(map: "sub_storage_barcode") @db.VarChar(80)

  @@unique([id_storage, sub_storage_barcode], name: "unique_sub_storage_barcode", map: "unique_sub_storage_barcode")
}

model subunpro {
  id_subunpro Int     @id @default(autoincrement())
  id_unit     Int?
  id_person   Int?
  id_subject  String? @db.Char(2)
  unit        Unit?   @relation(fields: [id_unit], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subunpro_ibfk_1")
  person      Person? @relation(fields: [id_person], references: [id_person], onDelete: Restrict, onUpdate: Restrict, map: "subunpro_ibfk_2")

  @@unique([id_unit, id_person], name: "unique_subunpro", map: "unique_subunpro")
  @@index([id_person], map: "id_person")
  @@index([id_unit], map: "id_unit")
}

model tdegree {
  id_tdegree    Int     @id @default(autoincrement())
  id_lab        Int?
  tdegree       Float?
  tdegree_type  String? @db.Char(2)
  tdegree_place String? @db.Char(1)
  Room          Room?   @relation(fields: [id_lab], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "tdegree_ibfk_1")

  @@index([id_lab], map: "id_lab")
}

model Unit {
  id                        Int                         @id @default(autoincrement()) @map("id_unit")
  unitId                    Int?                        @unique(map: "unique_sciper_unit") @map("sciper_unit")
  name                      String?                     @map("name_unit") @db.VarChar(60)
  id_institute              Int?                        @map("id_institut")
  aa                        aa[]
  subunpro                  subunpro[]
  institute                 Institute?                  @relation(fields: [id_institute], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "unit_ibfk_1")
  unit_has_cosec            unit_has_cosec[]
  unit_has_room             unit_has_room[]
  unit_has_storage_for_room unit_has_storage_for_room[]

  @@unique([name, id_institute], name: "unique_un", map: "unique_un")
  @@unique([unitId, name, id_institute], name: "unique_unit", map: "unique_unit")
  @@index([id_institute], map: "id_institut")
  @@map("unit")
}

model unit_has_storage_for_room {
  id_unit    Int
  id_lab     Int
  id_storage Int
  unit       Unit    @relation(fields: [id_unit], references: [id], onUpdate: Restrict, map: "unit_has_storage_for_room_ibfk_1")
  lab        Room    @relation(fields: [id_lab], references: [id], onUpdate: Restrict, map: "unit_has_storage_for_room_ibfk_2")
  storage    storage @relation(fields: [id_storage], references: [id_storage], onUpdate: Restrict, map: "unit_has_storage_for_room_ibfk_3")

  @@unique([id_unit, id_lab, id_storage], map: "unique_unit_has_storage_for_room")
  @@index([id_lab], map: "id_lab")
  @@index([id_storage], map: "id_storage")
}

model hazard_category {
  id_hazard_category     Int        @id @default(autoincrement())
  hazard_category_name   String    @db.VarChar(60)
  hazard_form            hazard_form?

  @@unique([hazard_category_name], map: "unique_hazard_category_name")
}

model hazard_form {
  id_hazard_form       Int                  @id @default(autoincrement())
  id_hazard_category   Int
  form                 String               @db.LongText
  version              String               @default("1.0.0")
  hazard_category      hazard_category      @relation(fields: [id_hazard_category], references: [id_hazard_category])
  hazard_form_history  hazard_form_history[]

  @@index([id_hazard_category], name: "id_hazard_category")
  @@unique([id_hazard_category], name: "unique_hazard_category")
}

model hazard_form_history {
  id_hazard_form_history       Int              @id @default(autoincrement())
  id_hazard_form               Int
  form                         String           @db.LongText
  version                      String           @default("1.0.0")
  modified_by                  String
  modified_on                  DateTime         @default(now())
  hazard_form                  hazard_form      @relation(fields: [id_hazard_form], references: [id_hazard_form])
  lab_has_hazards              lab_has_hazards[]

  @@index([id_hazard_form], name: "id_hazard_form")
}

model lab_has_hazards {
  id_lab_has_hazards        Int               @id @default(autoincrement())
  id_lab                    Int
  id_hazard_form_history    Int
  submission                String            @db.LongText
  Room                      Room              @relation(fields: [id_lab], references: [id])
  hazard_form_history       hazard_form_history @relation(fields: [id_hazard_form_history], references: [id_hazard_form_history])

  @@index([id_lab], name: "id_lab")
  @@index([id_hazard_form_history], name: "id_hazard_form_history")
}
